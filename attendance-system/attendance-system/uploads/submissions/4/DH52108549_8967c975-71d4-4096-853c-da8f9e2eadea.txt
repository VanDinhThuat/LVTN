import React, { useState, useEffect } from 'react';
import {
  Page,
  Header,
  Box,
  Text,
  Button,
  Input,
  Select,
  Icon,
  Tabs,
  Modal,
  List,
  Switch,
  Progress,
  Spinner,
  useSnackbar
} from 'zmp-ui';

const ProjectClassManager = () => {
  // 1. QU·∫¢N L√ù TR·∫†NG TH√ÅI
  const [classes, setClasses] = useState([]);
  const [selectedClass, setSelectedClass] = useState('');
  const [students, setStudents] = useState([]);
  const [weeklySchedule, setWeeklySchedule] = useState([]);
  const [submissions, setSubmissions] = useState([]);
  const [activeTab, setActiveTab] = useState('classes');

  // Form states
  const [newClassName, setNewClassName] = useState('');
  const [newClassDescription, setNewClassDescription] = useState('');
  const [classStartDate, setClassStartDate] = useState('');
  const [classDuration, setClassDuration] = useState(15);

  const [weekNumber, setWeekNumber] = useState(1);
  const [weekTitle, setWeekTitle] = useState('');
  const [weekDescription, setWeekDescription] = useState('');
  const [weekDeadline, setWeekDeadline] = useState('');

  const [evaluationComment, setEvaluationComment] = useState('');
  const [evaluationScore, setEvaluationScore] = useState('');

  // UI states
  const [createClassModalVisible, setCreateClassModalVisible] = useState(false);
  const [createWeekModalVisible, setCreateWeekModalVisible] = useState(false);
  const [evaluateModalVisible, setEvaluateModalVisible] = useState(false);
  const [currentSubmissionId, setCurrentSubmissionId] = useState(null);
  const [loading, setLoading] = useState(false);

  const { openSnackbar } = useSnackbar();

  // 2. D·ªÆ LI·ªÜU M·∫™U
  const sampleClasses = [
    {
      id: 'LDA001',
      name: 'ƒê·ªì √°n Web Development 2024',
      description: 'L·ªõp ƒë·ªì √°n ph√°t tri·ªÉn ·ª©ng d·ª•ng web s·ª≠ d·ª•ng React v√† Node.js',
      startDate: '2024-02-01',
      duration: 15,
      studentCount: 25,
      createdDate: '2024-01-15'
    },
    {
      id: 'LDA002',
      name: 'ƒê·ªì √°n Mobile App 2024',
      description: 'L·ªõp ƒë·ªì √°n ph√°t tri·ªÉn ·ª©ng d·ª•ng di ƒë·ªông React Native',
      startDate: '2024-02-15',
      duration: 16,
      studentCount: 20,
      createdDate: '2024-01-20'
    }
  ];

  const sampleStudents = [
    { id: 'SV001', name: 'Nguy·ªÖn VƒÉn An', email: 'an.nv@email.com', projectTitle: 'Website Th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠' },
    { id: 'SV002', name: 'Tr·∫ßn Th·ªã B√¨nh', email: 'binh.tt@email.com', projectTitle: '·ª®ng d·ª•ng Qu·∫£n l√Ω Chi ti√™u' },
    { id: 'SV003', name: 'L√™ Minh C∆∞·ªùng', email: 'cuong.lm@email.com', projectTitle: 'Game Puzzle 2D' },
    { id: 'SV004', name: 'Ph·∫°m Thu Dung', email: 'dung.pt@email.com', projectTitle: 'App H·ªçc Ngo·∫°i ng·ªØ' }
  ];

  const scoreOptions = [
    { value: 'A', label: 'A - Xu·∫•t s·∫Øc' },
    { value: 'B+', label: 'B+ - T·ªët' },
    { value: 'B', label: 'B - Kh√°' },
    { value: 'C+', label: 'C+ - Trung b√¨nh kh√°' },
    { value: 'C', label: 'C - Trung b√¨nh' },
    { value: 'D+', label: 'D+ - Y·∫øu' },
    { value: 'D', label: 'D - K√©m' },
    { value: 'F', label: 'F - R·ªõt' }
  ];

  // 3. useEffect - Kh·ªüi t·∫°o d·ªØ li·ªáu
  useEffect(() => {
    setClasses(sampleClasses);
    setStudents(sampleStudents);

    const sampleSchedule = [
      {
        id: 1,
        classId: 'LDA001',
        week: 1,
        title: 'Ph√¢n t√≠ch y√™u c·∫ßu v√† Thi·∫øt k·∫ø',
        description: 'Ho√†n th√†nh document ph√¢n t√≠ch y√™u c·∫ßu, use case diagram, v√† thi·∫øt k·∫ø database',
        deadline: '2024-02-08',
        isActive: true
      },
      {
        id: 2,
        classId: 'LDA001',
        week: 2,
        title: 'Thi·∫øt k·∫ø giao di·ªán ng∆∞·ªùi d√πng',
        description: 'T·∫°o wireframe, mockup v√† prototype giao di·ªán ch√≠nh',
        deadline: '2024-02-15',
        isActive: true
      }
    ];
    setWeeklySchedule(sampleSchedule);

    const sampleSubmissions = [
      {
        id: 1,
        classId: 'LDA001',
        studentId: 'SV001',
        week: 1,
        submissionDate: '2024-02-07',
        files: [
          { name: 'Phan_tich_yeu_cau.pdf', size: '2.3 MB', type: 'application/pdf' },
          { name: 'Database_design.sql', size: '1.1 MB', type: 'text/sql' }
        ],
        note: 'Em ƒë√£ ho√†n th√†nh ph√¢n t√≠ch y√™u c·∫ßu v√† thi·∫øt k·∫ø database. Mong th·∫ßy xem x√©t.',
        teacherComment: '',
        score: '',
        status: 'Ch·ªù ƒë√°nh gi√°'
      },
      {
        id: 2,
        classId: 'LDA001',
        studentId: 'SV002',
        week: 1,
        submissionDate: '2024-02-06',
        files: [
          { name: 'Requirements_Analysis.docx', size: '1.8 MB', type: 'application/docx' }
        ],
        note: 'Em g·ª≠i t√†i li·ªáu ph√¢n t√≠ch y√™u c·∫ßu ·∫°.',
        teacherComment: 'T·ªët, c·∫ßn b·ªï sung th√™m use case',
        score: 'B+',
        status: 'ƒê√£ ƒë√°nh gi√°'
      }
    ];
    setSubmissions(sampleSubmissions);
  }, []);

  // 4. HELPER FUNCTIONS
  const showSnackbar = (message, type = 'success') => {
    openSnackbar({
      text: message,
      type: type,
      duration: 3000
    });
  };

  const handleCreateClass = async () => {
    if (!newClassName.trim() || !newClassDescription.trim() || !classStartDate) {
      showSnackbar('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin l·ªõp h·ªçc!', 'error');
      return;
    }

    setLoading(true);

    // Simulate API call
    setTimeout(() => {
      const newClass = {
        id: `LDA${String(classes.length + 1).padStart(3, '0')}`,
        name: newClassName,
        description: newClassDescription,
        startDate: classStartDate,
        duration: classDuration,
        studentCount: 0,
        createdDate: new Date().toISOString().split('T')[0]
      };

      setClasses(prev => [...prev, newClass]);
      showSnackbar(`ƒê√£ t·∫°o l·ªõp "${newClassName}" th√†nh c√¥ng!`);

      // Reset form
      setNewClassName('');
      setNewClassDescription('');
      setClassStartDate('');
      setClassDuration(15);
      setCreateClassModalVisible(false);
      setLoading(false);
    }, 1000);
  };

  const handleCreateWeek = async () => {
    if (!selectedClass || !weekTitle.trim() || !weekDescription.trim() || !weekDeadline) {
      showSnackbar('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin tu·∫ßn theo d√µi!', 'error');
      return;
    }

    setLoading(true);

    setTimeout(() => {
      const newWeek = {
        id: Date.now(),
        classId: selectedClass,
        week: weekNumber,
        title: weekTitle,
        description: weekDescription,
        deadline: weekDeadline,
        isActive: true
      };

      setWeeklySchedule(prev => [...prev, newWeek]);
      showSnackbar(`ƒê√£ t·∫°o tu·∫ßn ${weekNumber} th√†nh c√¥ng!`);

      // Reset form
      setWeekNumber(prev => prev + 1);
      setWeekTitle('');
      setWeekDescription('');
      setWeekDeadline('');
      setCreateWeekModalVisible(false);
      setLoading(false);
    }, 1000);
  };

  const handleEvaluateSubmission = () => {
    if (!evaluationComment.trim() || !evaluationScore) {
      showSnackbar('Vui l√≤ng nh·∫≠p nh·∫≠n x√©t v√† ƒëi·ªÉm ƒë√°nh gi√°!', 'error');
      return;
    }

    setSubmissions(prev =>
      prev.map(sub =>
        sub.id === currentSubmissionId
          ? {
            ...sub,
            teacherComment: evaluationComment,
            score: evaluationScore,
            status: 'ƒê√£ ƒë√°nh gi√°'
          }
          : sub
      )
    );

    showSnackbar('ƒê√£ c·∫≠p nh·∫≠t ƒë√°nh gi√° th√†nh c√¥ng!');
    setEvaluationComment('');
    setEvaluationScore('');
    setEvaluateModalVisible(false);
    setCurrentSubmissionId(null);
  };

  const openEvaluationModal = (submissionId) => {
    setCurrentSubmissionId(submissionId);
    setEvaluateModalVisible(true);
  };

  // 5. COMPUTED VALUES
  const selectedClassInfo = classes.find(c => c.id === selectedClass);
  const classWeeks = weeklySchedule.filter(w => w.classId === selectedClass);
  const classSubmissions = submissions.filter(s => s.classId === selectedClass);
  const pendingSubmissions = classSubmissions.filter(s => s.status === 'Ch·ªù ƒë√°nh gi√°');

  // 6. RENDER COMPONENTS
  const renderClassManagement = () => (
    <Box p={4}>
      <Box mb={4}>
        <Button
          variant="primary"
          fullWidth
          onClick={() => setCreateClassModalVisible(true)}
        >
          <Icon icon="zi-plus" /> T·∫°o L·ªõp M·ªõi
        </Button>
      </Box>

      <Text size="large" bold mb={3}>üìö Danh S√°ch L·ªõp ƒê·ªì √Ån</Text>

      {classes.length === 0 ? (
        <Box className="text-center py-8">
          <Text className="text-gray-500">Ch∆∞a c√≥ l·ªõp ƒë·ªì √°n n√†o</Text>
        </Box>
      ) : (
        <List>
          {classes.map(classItem => (
            <List.Item
              key={classItem.id}
              onClick={() => setSelectedClass(classItem.id)}
              className={`cursor-pointer ${selectedClass === classItem.id ? 'bg-blue-50 border-blue-200' : ''}`}
              title={
                <Box>
                  <Text size="large" bold className={selectedClass === classItem.id ? 'text-blue-600' : ''}>
                    {classItem.name}
                  </Text>
                  <Text size="small" className="text-gray-500 mt-1">
                    {classItem.description}
                  </Text>
                </Box>
              }
              suffix={
                <Box className="text-right">
                  <Text size="small" className={selectedClass === classItem.id ? 'text-blue-600 font-semibold' : 'text-gray-500'}>
                    {selectedClass === classItem.id ? 'ƒêang ch·ªçn' : classItem.id}
                  </Text>
                  <Text size="small" className="text-gray-400">
                    {classItem.studentCount} sinh vi√™n
                  </Text>
                </Box>
              }
            />
          ))}
        </List>
      )}
    </Box>
  );

  const renderScheduleManagement = () => (
    <Box p={4}>
      {!selectedClass ? (
        <Box className="text-center py-8">
          <Icon icon="zi-calendar" size={48} className="text-gray-400" />
          <Text size="large" bold className="mt-2">üìÖ Qu·∫£n l√Ω L·ªãch Theo d√µi</Text>
          <Text className="text-gray-500 mt-1">Vui l√≤ng ch·ªçn m·ªôt l·ªõp ƒë·ªì √°n ƒë·ªÉ t·∫°o l·ªãch theo d√µi</Text>
        </Box>
      ) : (
        <>
          {selectedClassInfo && (
            <Box className="bg-blue-50 p-4 rounded-lg mb-4 border border-blue-200">
              <Text size="large" bold className="text-blue-600 mb-1">
                üìö {selectedClassInfo.name}
              </Text>
              <Text className="text-gray-600">{selectedClassInfo.description}</Text>
            </Box>
          )}

          <Box mb={4}>
            <Button
              variant="secondary"
              fullWidth
              onClick={() => setCreateWeekModalVisible(true)}
            >
              <Icon icon="zi-plus" /> T·∫°o Tu·∫ßn Theo D√µi
            </Button>
          </Box>

          <Text size="large" bold mb={3}>üìã L·ªãch Theo D√µi Hi·ªán T·∫°i</Text>

          {classWeeks.length === 0 ? (
            <Box className="text-center py-8">
              <Text className="text-gray-500">Ch∆∞a c√≥ tu·∫ßn theo d√µi n√†o ƒë∆∞·ª£c t·∫°o</Text>
            </Box>
          ) : (
            <List>
              {classWeeks.sort((a, b) => a.week - b.week).map(week => (
                <List.Item
                  key={week.id}
                  title={
                    <Box>
                      <Text size="large" bold className="text-blue-600">
                        üìÖ Tu·∫ßn {week.week}: {week.title}
                      </Text>
                      <Text className="text-gray-600 mt-1">{week.description}</Text>
                      <Text size="small" className="text-gray-500 mt-2">
                        ‚è∞ Deadline: {week.deadline} |
                        Status: {new Date(week.deadline) > new Date() ? ' ƒêang di·ªÖn ra' : ' ƒê√£ h·∫øt h·∫°n'}
                      </Text>
                    </Box>
                  }
                  suffix={
                    <Box className="text-right">
                      <Text size="small" className={week.isActive ? 'text-green-600' : 'text-gray-500'}>
                        {week.isActive ? 'ƒêang m·ªü' : 'ƒê√£ ƒë√≥ng'}
                      </Text>
                    </Box>
                  }
                />
              ))}
            </List>
          )}
        </>
      )}
    </Box>
  );

  const renderSubmissionManagement = () => (
    <Box p={4}>
      {!selectedClass ? (
        <Box className="text-center py-8">
          <Icon icon="zi-note" size={48} className="text-gray-400" />
          <Text size="large" bold className="mt-2">üìÑ Qu·∫£n l√Ω B√†i N·ªôp</Text>
          <Text className="text-gray-500 mt-1">Vui l√≤ng ch·ªçn m·ªôt l·ªõp ƒë·ªì √°n ƒë·ªÉ xem b√†i n·ªôp</Text>
        </Box>
      ) : (
        <>
          {selectedClassInfo && (
            <Box className="bg-green-50 p-4 rounded-lg mb-4 border border-green-200">
              <Text size="large" bold className="text-green-600 mb-2">
                üìö {selectedClassInfo.name}
              </Text>
              <Box className="flex justify-between">
                <Text size="small">üìÑ T·ªïng: {classSubmissions.length}</Text>
                <Text size="small">‚è≥ Ch·ªù: {pendingSubmissions.length}</Text>
                <Text size="small">‚úÖ ƒê√£ ƒë√°nh gi√°: {classSubmissions.length - pendingSubmissions.length}</Text>
              </Box>
            </Box>
          )}

          <Text size="large" bold mb={3}>üìÑ Danh S√°ch B√†i N·ªôp</Text>

          {classSubmissions.length === 0 ? (
            <Box className="text-center py-8">
              <Text className="text-gray-500">Ch∆∞a c√≥ b√†i n·ªôp n√†o</Text>
            </Box>
          ) : (
            <List>
              {classSubmissions.map(submission => {
                const student = students.find(s => s.id === submission.studentId);
                return (
                  <List.Item
                    key={submission.id}
                    title={
                      <Box>
                        <Text size="large" bold className="text-blue-600">
                          üë®‚Äçüéì {student ? student.name : 'Unknown Student'}
                        </Text>
                        <Text size="small" className="text-gray-500">
                          üìß {student ? student.email : 'N/A'} | üìã {student ? student.projectTitle : 'N/A'}
                        </Text>
                        <Text size="small" className="text-gray-500">
                          üìÖ Tu·∫ßn {submission.week} | üì§ {submission.submissionDate}
                        </Text>

                        <Box className="mt-2">
                          <Text size="small" bold>üìé Files:</Text>
                          {submission.files.map((file, index) => (
                            <Text key={index} size="small" className="text-gray-600 ml-2">
                              ‚Ä¢ {file.name} ({file.size})
                            </Text>
                          ))}
                        </Box>

                        {submission.note && (
                          <Box className="mt-2 p-2 bg-gray-50 rounded border-l-4 border-gray-400">
                            <Text size="small" className="italic">üí¨ {submission.note}</Text>
                          </Box>
                        )}

                        {submission.status === 'ƒê√£ ƒë√°nh gi√°' && (
                          <Box className="mt-2 p-2 bg-green-50 rounded border-l-4 border-green-400">
                            <Text size="small" bold>üë®‚Äçüè´ ƒê√°nh gi√°: {submission.score}</Text>
                            <Text size="small">{submission.teacherComment}</Text>
                          </Box>
                        )}
                      </Box>
                    }
                    suffix={
                      <Box className="text-right">
                        <Text size="small" className={submission.status === 'ƒê√£ ƒë√°nh gi√°' ? 'text-green-600' : 'text-orange-600'}>
                          {submission.status}
                        </Text>
                        {submission.status === 'Ch·ªù ƒë√°nh gi√°' && (
                          <Button
                            size="small"
                            variant="primary"
                            className="mt-2"
                            onClick={() => openEvaluationModal(submission.id)}
                          >
                            ƒê√°nh gi√°
                          </Button>
                        )}
                      </Box>
                    }
                  />
                );
              })}
            </List>
          )}
        </>
      )}
    </Box>
  );

  return (
    <Page>


      <Tabs id="main-tabs" activeKey={activeTab} onChange={setActiveTab}>
        <Tabs.Tab key="classes" label="üìö L·ªõp h·ªçc">
          {renderClassManagement()}
        </Tabs.Tab>
        <Tabs.Tab key="schedule" label="üìÖ L·ªãch tr√¨nh">
          {renderScheduleManagement()}
        </Tabs.Tab>
        <Tabs.Tab key="submissions" label="üìÑ B√†i n·ªôp">
          {renderSubmissionManagement()}
        </Tabs.Tab>
      </Tabs>

      {/* Modal t·∫°o l·ªõp m·ªõi */}
      <Modal
        visible={createClassModalVisible}
        title="‚ûï T·∫°o L·ªõp ƒê·ªì √Ån M·ªõi"
        onClose={() => setCreateClassModalVisible(false)}
      >
        <Box p={4}>
          <Box mb={3}>
            <Text className="font-semibold mb-2">üìù T√™n l·ªõp:</Text>
            <Input
              value={newClassName}
              onChange={(e) => setNewClassName(e.target.value)}
              placeholder="VD: ƒê·ªì √°n Web Development 2024"
            />
          </Box>

          <Box mb={3}>
            <Text className="font-semibold mb-2">üìÖ Ng√†y b·∫Øt ƒë·∫ßu:</Text>
            <Input
              type="date"
              value={classStartDate}
              onChange={(e) => setClassStartDate(e.target.value)}
            />
          </Box>

          <Box mb={3}>
            <Text className="font-semibold mb-2">üìã M√¥ t·∫£:</Text>
            <Input
              value={newClassDescription}
              onChange={(e) => setNewClassDescription(e.target.value)}
              placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ l·ªõp ƒë·ªì √°n..."
            />
          </Box>

          <Box mb={4}>
            <Text className="font-semibold mb-2">‚è±Ô∏è Th·ªùi l∆∞·ª£ng (tu·∫ßn):</Text>
            <Input
              type="number"
              value={classDuration}
              onChange={(e) => setClassDuration(parseInt(e.target.value))}
            />
          </Box>

          <Box className="flex gap-2">
            <Button
              variant="secondary"
              fullWidth
              onClick={() => setCreateClassModalVisible(false)}
            >
              H·ªßy
            </Button>
            <Button
              variant="primary"
              fullWidth
              onClick={handleCreateClass}
              loading={loading}
            >
              {loading ? <Spinner /> : '‚ú® T·∫°o L·ªõp'}
            </Button>
          </Box>
        </Box>
      </Modal>

      {/* Modal t·∫°o tu·∫ßn theo d√µi */}
      <Modal
        visible={createWeekModalVisible}
        title="‚ûï T·∫°o Tu·∫ßn Theo D√µi"
        onClose={() => setCreateWeekModalVisible(false)}
      >
        <Box p={4}>
          <Box
            flex
            justifyContent="space-between"
            style={{ gap: 16 }}
          >
            <Box
              style={{ flex: 1 }}
            >
              <Text className="font-semibold mb-2">üìÖ Tu·∫ßn s·ªë:</Text>
              <Input
                type="number"
                value={weekNumber}
                onChange={(e) => setWeekNumber(parseInt(e.target.value))}
              />
            </Box>

            <Box
              style={{ flex: 1 }}
            >
              <Text className="font-semibold mb-2">‚è∞ Deadline:</Text>
              <Input
                type="date"
                value={weekDeadline}
                onChange={(e) => setWeekDeadline(e.target.value)}
              />
            </Box>
          </Box>

          <Box mb={3} mt={3}>
            <Text className="font-semibold mb-2">üìù Ti√™u ƒë·ªÅ:</Text>
            <Input
              value={weekTitle}
              onChange={(e) => setWeekTitle(e.target.value)}
              placeholder="VD: Ph√¢n t√≠ch y√™u c·∫ßu v√† Thi·∫øt k·∫ø"
            />
          </Box>

          <Box mb={4}>
            <Text className="font-semibold mb-2">üìã M√¥ t·∫£:</Text>
            <Input
              value={weekDescription}
              onChange={(e) => setWeekDescription(e.target.value)}
              placeholder="M√¥ t·∫£ c√¥ng vi·ªác c·∫ßn ho√†n th√†nh..."
            />
          </Box>

          <Box className="flex gap-2">
            <Button
              variant="secondary"
              fullWidth
              onClick={() => setCreateWeekModalVisible(false)}
            >
              H·ªßy
            </Button>
            <Button
              variant="primary"
              fullWidth
              onClick={handleCreateWeek}
              loading={loading}
            >
              {loading ? <Spinner /> : 'üìÖ T·∫°o Tu·∫ßn'}
            </Button>
          </Box>
        </Box>
      </Modal>

      {/* Modal ƒë√°nh gi√° */}
      <Modal
        visible={evaluateModalVisible}
        title="‚≠ê ƒê√°nh Gi√° B√†i N·ªôp"
        onClose={() => setEvaluateModalVisible(false)}
      >
        <Box p={4}>
          <Box mb={3}>
            <Text className="font-semibold mb-2">üí¨ Nh·∫≠n x√©t:</Text>
            <Input
              value={evaluationComment}
              onChange={(e) => setEvaluationComment(e.target.value)}
              placeholder="Nh·∫≠p nh·∫≠n x√©t chi ti·∫øt..."
            />
          </Box>

          <Box mb={4}>
            <Text className="font-semibold mb-2">üìä ƒêi·ªÉm:</Text>
            <Select
              value={evaluationScore}
              onChange={(value) => setEvaluationScore(value)}
              placeholder="Ch·ªçn ƒëi·ªÉm"
            >
              {scoreOptions.map(score => (
                <Select.Option key={score.value} value={score.value} title={score.label} />
              ))}
            </Select>
          </Box>

          <Box className="flex gap-2">
            <Button
              variant="secondary"
              fullWidth
              onClick={() => setEvaluateModalVisible(false)}
            >
              H·ªßy
            </Button>
            <Button
              variant="primary"
              fullWidth
              onClick={handleEvaluateSubmission}
            >
              ‚úÖ L∆∞u ƒê√°nh Gi√°
            </Button>
          </Box>
        </Box>
      </Modal>
    </Page>
  );
};

export default ProjectClassManager;