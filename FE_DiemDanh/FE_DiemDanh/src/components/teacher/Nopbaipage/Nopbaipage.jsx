import React, { useState, useEffect } from 'react';
import { Box, Button, Page, Text, Input, useLocation, useNavigate } from "zmp-ui";
import axios from "axios";
import { url } from "../../../AppConfig/AppConfig";
const NopBaiPage = () => {
  const [loading, setLoading] = useState(false);
  const [tuanInfo, setTuanInfo] = useState(null);
  const [selectedFile, setSelectedFile] = useState(null);
  const [ghiChu, setGhiChu] = useState('');
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(false);
  const [user, setUser] = useState(null);
  
  const location = useLocation();
  const navigate = useNavigate();
  const params = new URLSearchParams(location.search);
  const maTuan = params.get("maTuan");

  useEffect(() => {
    if (maTuan) {
      fetchTuanInfo();
      getUser();
    }
  }, [maTuan]);

  const getUser = () => {
    const userData = JSON.parse(localStorage.getItem("user"));
    setUser(userData);
  };

  const fetchTuanInfo = async () => {
    try {
      setLoading(true);
      const response = await axios.get(`${url}/api/tuan-nop-bai/${maTuan}`);
      setTuanInfo(response.data);
    } catch (err) {
      setError('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin tu·∫ßn n·ªôp b√†i');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      // Ki·ªÉm tra k√≠ch th∆∞·ªõc file (v√≠ d·ª•: t·ªëi ƒëa 10MB)
      if (file.size > 10 * 1024 * 1024) {
        setError('File qu√° l·ªõn! Vui l√≤ng ch·ªçn file nh·ªè h∆°n 10MB');
        return;
      }
      
      // Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
      const allowedTypes = [
        'application/pdf',
        'application/msword',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'text/plain',
        'image/jpeg',
        'image/png',
        'image/gif'
      ];
      
      if (!allowedTypes.includes(file.type)) {
        setError('ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£! Vui l√≤ng ch·ªçn file PDF, Word, Text ho·∫∑c h√¨nh ·∫£nh');
        return;
      }
      
      setSelectedFile(file);
      setError(null);
    }
  };

  const handleSubmit = async () => {
    if (!selectedFile) {
      setError('Vui l√≤ng ch·ªçn file ƒë·ªÉ n·ªôp b√†i');
      return;
    }

    if (!user) {
      setError('Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng');
      return;
    }

    try {
      setLoading(true);
      setError(null);

      // T·∫°o FormData ƒë·ªÉ g·ª≠i file
      const formData = new FormData();
      formData.append('file', selectedFile);
      formData.append('maTuan', maTuan);
      formData.append('maNguoiDung', user.userId);
      formData.append('ghiChu', ghiChu);
      console.log('FormData contents:');
    for (let [key, value] of formData.entries()) {
      console.log(key, value);
    }
      const response = await axios.post(
        `${url}/api/nop-bai/submit`,
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        }
      );

      if (response.status === 200) {
        setSuccess(true);
        setTimeout(() => {
          navigate(-1); // Quay l·∫°i trang tr∆∞·ªõc
        }, 2000);
      }
    } catch (err) {
      setError(err.response?.data?.message || 'C√≥ l·ªói x·∫£y ra khi n·ªôp b√†i');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('vi-VN', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  if (loading && !tuanInfo) {
    return (
      <Page>
        <Box style={{ textAlign: 'center', padding: '50px' }}>
          <Text>ƒêang t·∫£i...</Text>
        </Box>
      </Page>
    );
  }

  if (success) {
    return (
      <Page>
        <Box style={{ textAlign: 'center', padding: '50px' }}>
          <Box style={{ 
            backgroundColor: '#e8f5e8', 
            color: '#2d5a2d', 
            padding: '24px', 
            borderRadius: '12px',
            border: '2px solid #4caf50'
          }}>
            <Text style={{ fontSize: '20px', fontWeight: 'bold', marginBottom: '12px' }}>
              ‚úÖ N·ªôp b√†i th√†nh c√¥ng!
            </Text>
            <Text style={{ fontSize: '14px' }}>
              B√†i l√†m c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng. ƒêang chuy·ªÉn h∆∞·ªõng...
            </Text>
          </Box>
        </Box>
      </Page>
    );
  }

  return (
    <Page className="nop-bai-page">
      <Box style={{ padding: '16px' }}>
        {/* Header */}
        <Box style={{ marginBottom: '24px' }}>
          <Button 
            variant="secondary" 
            onClick={() => navigate(-1)}
            style={{ marginBottom: '16px' }}
          >
            ‚Üê Quay l·∫°i
          </Button>
          
          {tuanInfo && (
            <Box style={{ 
              backgroundColor: '#f8f9fa', 
              padding: '16px', 
              borderRadius: '8px',
              border: '1px solid #e0e0e0'
            }}>
              <Text style={{ fontSize: '20px', fontWeight: 'bold', marginBottom: '8px' }}>
                N·ªôp b√†i: {tuanInfo.tenTuan}
              </Text>
              <Text style={{ color: '#666', fontSize: '14px', marginBottom: '8px' }}>
                {tuanInfo.moTa}
              </Text>
              <Text style={{ color: '#d32f2f', fontSize: '14px', fontWeight: 'bold' }}>
                ‚è∞ H·∫°n n·ªôp: {formatDate(tuanInfo.ngayKetThuc)}
              </Text>
            </Box>
          )}
        </Box>

        {/* Error Message */}
        {error && (
          <Box style={{ 
            backgroundColor: '#fee', 
            color: '#c53030', 
            padding: '12px', 
            borderRadius: '8px',
            marginBottom: '16px',
            border: '1px solid #fed7d7'
          }}>
            <Text style={{ fontSize: '14px' }}>‚ùå {error}</Text>
          </Box>
        )}

        {/* File Upload Section */}
        <Box style={{ 
          backgroundColor: 'white', 
          padding: '20px', 
          borderRadius: '8px',
          border: '1px solid #e0e0e0',
          marginBottom: '20px'
        }}>
          <Text style={{ fontSize: '18px', fontWeight: 'bold', marginBottom: '16px' }}>
            üìÅ Ch·ªçn file b√†i l√†m
          </Text>
          
          <Box style={{ marginBottom: '16px' }}>
            <input
              type="file"
              onChange={handleFileChange}
              accept=".pdf,.doc,.docx,.txt,.jpg,.jpeg,.png,.gif"
              style={{
                width: '100%',
                padding: '12px',
                border: '2px dashed #ccc',
                borderRadius: '8px',
                backgroundColor: '#fafafa',
                cursor: 'pointer'
              }}
            />
          </Box>

          {/* File Info */}
          {selectedFile && (
            <Box style={{ 
              backgroundColor: '#e8f5e8', 
              padding: '12px', 
              borderRadius: '6px',
              marginBottom: '16px'
            }}>
              <Text style={{ fontSize: '14px', fontWeight: 'bold', marginBottom: '4px' }}>
                üìÑ File ƒë√£ ch·ªçn:
              </Text>
              <Text style={{ fontSize: '14px', color: '#666' }}>
                T√™n: {selectedFile.name}
              </Text>
              <Text style={{ fontSize: '14px', color: '#666' }}>
                K√≠ch th∆∞·ªõc: {formatFileSize(selectedFile.size)}
              </Text>
              <Text style={{ fontSize: '14px', color: '#666' }}>
                Lo·∫°i: {selectedFile.type || 'Kh√¥ng x√°c ƒë·ªãnh'}
              </Text>
            </Box>
          )}

          {/* Supported file types */}
          <Box style={{ 
            backgroundColor: '#f0f8ff', 
            padding: '12px', 
            borderRadius: '6px',
            marginBottom: '16px'
          }}>
            <Text style={{ fontSize: '12px', color: '#666', fontWeight: 'bold', marginBottom: '4px' }}>
              üí° ƒê·ªãnh d·∫°ng file ƒë∆∞·ª£c h·ªó tr·ª£:
            </Text>
            <Text style={{ fontSize: '12px', color: '#666' }}>
              PDF, Word (.doc, .docx), Text (.txt), H√¨nh ·∫£nh (.jpg, .png, .gif)
            </Text>
            <Text style={{ fontSize: '12px', color: '#666' }}>
              K√≠ch th∆∞·ªõc t·ªëi ƒëa: 10MB
            </Text>
          </Box>
        </Box>

        {/* Ghi ch√∫ */}
        <Box style={{ 
          backgroundColor: 'white', 
          padding: '20px', 
          borderRadius: '8px',
          border: '1px solid #e0e0e0',
          marginBottom: '20px'
        }}>
          <Text style={{ fontSize: '16px', fontWeight: 'bold', marginBottom: '12px' }}>
            üìù Ghi ch√∫ (t√πy ch·ªçn)
          </Text>
          <textarea
            value={ghiChu}
            onChange={(e) => setGhiChu(e.target.value)}
            placeholder="Nh·∫≠p ghi ch√∫ cho b√†i n·ªôp c·ªßa b·∫°n..."
            style={{
              width: '100%',
              minHeight: '100px',
              padding: '12px',
              border: '1px solid #ccc',
              borderRadius: '6px',
              fontSize: '14px',
              resize: 'vertical'
            }}
          />
        </Box>

        {/* Submit Button */}
        <Box style={{ display: 'flex', gap: '12px' }}>
          <Button 
            variant="secondary" 
            onClick={() => navigate(-1)}
            style={{ flex: 1 }}
          >
            H·ªßy
          </Button>
          <Button 
            variant="primary"
            onClick={handleSubmit}
            disabled={loading || !selectedFile}
            style={{ flex: 2 }}
          >
            {loading ? 'ƒêang n·ªôp...' : 'N·ªôp b√†i'}
          </Button>
        </Box>
      </Box>
    </Page>
  );
};

export default NopBaiPage;